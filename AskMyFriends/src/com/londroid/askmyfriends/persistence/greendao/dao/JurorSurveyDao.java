package com.londroid.askmyfriends.persistence.greendao.dao;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.SqlUtils;
import de.greenrobot.dao.internal.DaoConfig;
import de.greenrobot.dao.query.Query;
import de.greenrobot.dao.query.QueryBuilder;

import com.londroid.askmyfriends.persistence.greendao.domain.Juror;
import com.londroid.askmyfriends.persistence.greendao.domain.Survey;

import com.londroid.askmyfriends.persistence.greendao.domain.JurorSurvey;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table JUROR_SURVEY.
*/
public class JurorSurveyDao extends AbstractDao<JurorSurvey, Long> {

    public static final String TABLENAME = "JUROR_SURVEY";

    /**
     * Properties of entity JurorSurvey.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property JurorId = new Property(1, long.class, "jurorId", false, "JUROR_ID");
        public final static Property SurveyId = new Property(2, long.class, "surveyId", false, "SURVEY_ID");
    };

    private DaoSession daoSession;

    private Query<JurorSurvey> juror_SurveysQuery;
    private Query<JurorSurvey> survey_JurorsQuery;

    public JurorSurveyDao(DaoConfig config) {
        super(config);
    }
    
    public JurorSurveyDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'JUROR_SURVEY' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'JUROR_ID' INTEGER NOT NULL ," + // 1: jurorId
                "'SURVEY_ID' INTEGER NOT NULL );"); // 2: surveyId
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'JUROR_SURVEY'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, JurorSurvey entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getJurorId());
        stmt.bindLong(3, entity.getSurveyId());
    }

    @Override
    protected void attachEntity(JurorSurvey entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public JurorSurvey readEntity(Cursor cursor, int offset) {
        JurorSurvey entity = new JurorSurvey( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // jurorId
            cursor.getLong(offset + 2) // surveyId
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, JurorSurvey entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setJurorId(cursor.getLong(offset + 1));
        entity.setSurveyId(cursor.getLong(offset + 2));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(JurorSurvey entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(JurorSurvey entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "surveys" to-many relationship of Juror. */
    public List<JurorSurvey> _queryJuror_Surveys(long jurorId) {
        synchronized (this) {
            if (juror_SurveysQuery == null) {
                QueryBuilder<JurorSurvey> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.JurorId.eq(null));
                juror_SurveysQuery = queryBuilder.build();
            }
        }
        Query<JurorSurvey> query = juror_SurveysQuery.forCurrentThread();
        query.setParameter(0, jurorId);
        return query.list();
    }

    /** Internal query to resolve the "jurors" to-many relationship of Survey. */
    public List<JurorSurvey> _querySurvey_Jurors(long surveyId) {
        synchronized (this) {
            if (survey_JurorsQuery == null) {
                QueryBuilder<JurorSurvey> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.SurveyId.eq(null));
                survey_JurorsQuery = queryBuilder.build();
            }
        }
        Query<JurorSurvey> query = survey_JurorsQuery.forCurrentThread();
        query.setParameter(0, surveyId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getJurorDao().getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T1", daoSession.getSurveyDao().getAllColumns());
            builder.append(" FROM JUROR_SURVEY T");
            builder.append(" LEFT JOIN JUROR T0 ON T.'JUROR_ID'=T0.'_id'");
            builder.append(" LEFT JOIN SURVEY T1 ON T.'SURVEY_ID'=T1.'_id'");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected JurorSurvey loadCurrentDeep(Cursor cursor, boolean lock) {
        JurorSurvey entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        Juror juror = loadCurrentOther(daoSession.getJurorDao(), cursor, offset);
         if(juror != null) {
            entity.setJuror(juror);
        }
        offset += daoSession.getJurorDao().getAllColumns().length;

        Survey survey = loadCurrentOther(daoSession.getSurveyDao(), cursor, offset);
         if(survey != null) {
            entity.setSurvey(survey);
        }

        return entity;    
    }

    public JurorSurvey loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<JurorSurvey> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<JurorSurvey> list = new ArrayList<JurorSurvey>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<JurorSurvey> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<JurorSurvey> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
