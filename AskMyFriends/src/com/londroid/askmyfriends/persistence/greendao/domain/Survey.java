package com.londroid.askmyfriends.persistence.greendao.domain;

import java.util.List;
import com.londroid.askmyfriends.persistence.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.londroid.askmyfriends.persistence.greendao.dao.AnswerDao;
import com.londroid.askmyfriends.persistence.greendao.dao.CommentDao;
import com.londroid.askmyfriends.persistence.greendao.dao.JurorSurveyDao;
import com.londroid.askmyfriends.persistence.greendao.dao.OwnerDao;
import com.londroid.askmyfriends.persistence.greendao.dao.QuestionDao;
import com.londroid.askmyfriends.persistence.greendao.dao.SurveyDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table SURVEY.
 */
public class Survey {

    private Long id;
    /** Not-null value. */
    private String title;
    private java.util.Date creationDate;
    private java.util.Date modificationDate;
    private String choiceType;
    private long questionId;
    private long ownerId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient SurveyDao myDao;

    private Question question;
    private Long question__resolvedKey;

    private Owner owner;
    private Long owner__resolvedKey;

    private List<Answer> answers;
    private List<JurorSurvey> jurors;
    private List<Comment> comments;

    public Survey() {
    }

    public Survey(Long id) {
        this.id = id;
    }

    public Survey(Long id, String title, java.util.Date creationDate, java.util.Date modificationDate, String choiceType, long questionId, long ownerId) {
        this.id = id;
        this.title = title;
        this.creationDate = creationDate;
        this.modificationDate = modificationDate;
        this.choiceType = choiceType;
        this.questionId = questionId;
        this.ownerId = ownerId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getSurveyDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    /** Not-null value. */
    public String getTitle() {
        return title;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTitle(String title) {
        this.title = title;
    }

    public java.util.Date getCreationDate() {
        return creationDate;
    }

    public void setCreationDate(java.util.Date creationDate) {
        this.creationDate = creationDate;
    }

    public java.util.Date getModificationDate() {
        return modificationDate;
    }

    public void setModificationDate(java.util.Date modificationDate) {
        this.modificationDate = modificationDate;
    }

    public String getChoiceType() {
        return choiceType;
    }

    public void setChoiceType(String choiceType) {
        this.choiceType = choiceType;
    }

    public long getQuestionId() {
        return questionId;
    }

    public void setQuestionId(long questionId) {
        this.questionId = questionId;
    }

    public long getOwnerId() {
        return ownerId;
    }

    public void setOwnerId(long ownerId) {
        this.ownerId = ownerId;
    }

    /** To-one relationship, resolved on first access. */
    public Question getQuestion() {
        long __key = this.questionId;
        if (question__resolvedKey == null || !question__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            QuestionDao targetDao = daoSession.getQuestionDao();
            Question questionNew = targetDao.load(__key);
            synchronized (this) {
                question = questionNew;
            	question__resolvedKey = __key;
            }
        }
        return question;
    }

    public void setQuestion(Question question) {
        if (question == null) {
            throw new DaoException("To-one property 'questionId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.question = question;
            questionId = question.getId();
            question__resolvedKey = questionId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Owner getOwner() {
        long __key = this.ownerId;
        if (owner__resolvedKey == null || !owner__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            OwnerDao targetDao = daoSession.getOwnerDao();
            Owner ownerNew = targetDao.load(__key);
            synchronized (this) {
                owner = ownerNew;
            	owner__resolvedKey = __key;
            }
        }
        return owner;
    }

    public void setOwner(Owner owner) {
        if (owner == null) {
            throw new DaoException("To-one property 'ownerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.owner = owner;
            ownerId = owner.getId();
            owner__resolvedKey = ownerId;
        }
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Answer> getAnswers() {
        if (answers == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerDao targetDao = daoSession.getAnswerDao();
            List<Answer> answersNew = targetDao._querySurvey_Answers(id);
            synchronized (this) {
                if(answers == null) {
                    answers = answersNew;
                }
            }
        }
        return answers;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetAnswers() {
        answers = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<JurorSurvey> getJurors() {
        if (jurors == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JurorSurveyDao targetDao = daoSession.getJurorSurveyDao();
            List<JurorSurvey> jurorsNew = targetDao._querySurvey_Jurors(id);
            synchronized (this) {
                if(jurors == null) {
                    jurors = jurorsNew;
                }
            }
        }
        return jurors;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetJurors() {
        jurors = null;
    }

    /** To-many relationship, resolved on first access (and after reset). Changes to to-many relations are not persisted, make changes to the target entity. */
    public List<Comment> getComments() {
        if (comments == null) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            List<Comment> commentsNew = targetDao._querySurvey_Comments(id);
            synchronized (this) {
                if(comments == null) {
                    comments = commentsNew;
                }
            }
        }
        return comments;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    public synchronized void resetComments() {
        comments = null;
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
