package com.londroid.askmyfriends.persistence.greendao.domain;

import com.londroid.askmyfriends.persistence.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.londroid.askmyfriends.persistence.greendao.dao.AnswerDao;
import com.londroid.askmyfriends.persistence.greendao.dao.SurveyDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table ANSWER.
 */
public class Answer {

    private Long id;
    private String text;
    private Integer order;
    private long surveyId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient AnswerDao myDao;

    private Survey survey;
    private Long survey__resolvedKey;


    public Answer() {
    }

    public Answer(Long id) {
        this.id = id;
    }

    public Answer(Long id, String text, Integer order, long surveyId) {
        this.id = id;
        this.text = text;
        this.order = order;
        this.surveyId = surveyId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getAnswerDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getText() {
        return text;
    }

    public void setText(String text) {
        this.text = text;
    }

    public Integer getOrder() {
        return order;
    }

    public void setOrder(Integer order) {
        this.order = order;
    }

    public long getSurveyId() {
        return surveyId;
    }

    public void setSurveyId(long surveyId) {
        this.surveyId = surveyId;
    }

    /** To-one relationship, resolved on first access. */
    public Survey getSurvey() {
        long __key = this.surveyId;
        if (survey__resolvedKey == null || !survey__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            SurveyDao targetDao = daoSession.getSurveyDao();
            Survey surveyNew = targetDao.load(__key);
            synchronized (this) {
                survey = surveyNew;
            	survey__resolvedKey = __key;
            }
        }
        return survey;
    }

    public void setSurvey(Survey survey) {
        if (survey == null) {
            throw new DaoException("To-one property 'surveyId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.survey = survey;
            surveyId = survey.getId();
            survey__resolvedKey = surveyId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
