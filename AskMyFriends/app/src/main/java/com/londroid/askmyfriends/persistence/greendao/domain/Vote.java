package com.londroid.askmyfriends.persistence.greendao.domain;

import com.londroid.askmyfriends.persistence.greendao.dao.DaoSession;
import de.greenrobot.dao.DaoException;

import com.londroid.askmyfriends.persistence.greendao.dao.AnswerDao;
import com.londroid.askmyfriends.persistence.greendao.dao.CommentDao;
import com.londroid.askmyfriends.persistence.greendao.dao.JurorDao;
import com.londroid.askmyfriends.persistence.greendao.dao.VoteDao;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT. Enable "keep" sections if you want to edit. 
/**
 * Entity mapped to table VOTE.
 */
public class Vote {

    private Long id;
    private long answerId;
    private long jurorId;
    private long commentId;

    /** Used to resolve relations */
    private transient DaoSession daoSession;

    /** Used for active entity operations. */
    private transient VoteDao myDao;

    private Answer answer;
    private Long answer__resolvedKey;

    private Juror juror;
    private Long juror__resolvedKey;

    private Comment comment;
    private Long comment__resolvedKey;


    public Vote() {
    }

    public Vote(Long id) {
        this.id = id;
    }

    public Vote(Long id, long answerId, long jurorId, long commentId) {
        this.id = id;
        this.answerId = answerId;
        this.jurorId = jurorId;
        this.commentId = commentId;
    }

    /** called by internal mechanisms, do not call yourself. */
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getVoteDao() : null;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public long getAnswerId() {
        return answerId;
    }

    public void setAnswerId(long answerId) {
        this.answerId = answerId;
    }

    public long getJurorId() {
        return jurorId;
    }

    public void setJurorId(long jurorId) {
        this.jurorId = jurorId;
    }

    public long getCommentId() {
        return commentId;
    }

    public void setCommentId(long commentId) {
        this.commentId = commentId;
    }

    /** To-one relationship, resolved on first access. */
    public Answer getAnswer() {
        long __key = this.answerId;
        if (answer__resolvedKey == null || !answer__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            AnswerDao targetDao = daoSession.getAnswerDao();
            Answer answerNew = targetDao.load(__key);
            synchronized (this) {
                answer = answerNew;
            	answer__resolvedKey = __key;
            }
        }
        return answer;
    }

    public void setAnswer(Answer answer) {
        if (answer == null) {
            throw new DaoException("To-one property 'answerId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.answer = answer;
            answerId = answer.getId();
            answer__resolvedKey = answerId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Juror getJuror() {
        long __key = this.jurorId;
        if (juror__resolvedKey == null || !juror__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            JurorDao targetDao = daoSession.getJurorDao();
            Juror jurorNew = targetDao.load(__key);
            synchronized (this) {
                juror = jurorNew;
            	juror__resolvedKey = __key;
            }
        }
        return juror;
    }

    public void setJuror(Juror juror) {
        if (juror == null) {
            throw new DaoException("To-one property 'jurorId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.juror = juror;
            jurorId = juror.getId();
            juror__resolvedKey = jurorId;
        }
    }

    /** To-one relationship, resolved on first access. */
    public Comment getComment() {
        long __key = this.commentId;
        if (comment__resolvedKey == null || !comment__resolvedKey.equals(__key)) {
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            CommentDao targetDao = daoSession.getCommentDao();
            Comment commentNew = targetDao.load(__key);
            synchronized (this) {
                comment = commentNew;
            	comment__resolvedKey = __key;
            }
        }
        return comment;
    }

    public void setComment(Comment comment) {
        if (comment == null) {
            throw new DaoException("To-one property 'commentId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.comment = comment;
            commentId = comment.getId();
            comment__resolvedKey = commentId;
        }
    }

    /** Convenient call for {@link AbstractDao#delete(Object)}. Entity must attached to an entity context. */
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.delete(this);
    }

    /** Convenient call for {@link AbstractDao#update(Object)}. Entity must attached to an entity context. */
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.update(this);
    }

    /** Convenient call for {@link AbstractDao#refresh(Object)}. Entity must attached to an entity context. */
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }    
        myDao.refresh(this);
    }

}
